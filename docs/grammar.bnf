module = (def [sep def])?
def = typedef | valuedef
typedef = `type` ID `=` type
valuedef = `let` ID `=` value

sep = NL | `;`  # separator

# type
type = tnamed | tpointer | tarray | tfunc | trecord | tenum
tnamed = ID
tpointer = `*` type
tarray = `[` expr? `]` type
tfunc = `(` (field [sep field])? `)` `->` type
trecord = `record` `{` (field [sep field])? `}`
tenum = `enum` `{` (ID [sep ID])? `}`

# value
value = vterm | vun | vbin | vcall | vindex | vaccess | vcast | vsizeof | valignof
vterm = ID
vun = un_op value
un_op = `+` | `-` | `not` | `*` | `&`
vbin = value bin_op value
bin_op = `+` | `-` | `*` | `/` | `%` | `and` | `or` | `xor` | `==` | `!=` | `<` | `>` | `<=` | `>=` | `<<` | `>>`
vcall = value `(` (value [sep value])? `)`
vindex = value `[` value `]`
vaccess = value `.` ID
vcast = value `to` type
vsizeof = `sizeof` type
valignof = `alignof` type

vterm = vid | vnum | vfunc | varray | vrecord
